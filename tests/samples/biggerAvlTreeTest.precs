using System.Collections.Generic;
using DataStructures.Trees;
using Xunit;

namespace UnitTest.DataStructuresTests
{
    public static class AVLTreeTest
    {

        public static void DoTest()
        {
            AVLTree<int> avlTree = new AVLTree<int>();

            
            
            
            
            
            
            avlTree.Insert(4); 
            avlTree.Insert(5); 
            avlTree.Insert(7); 

            
            AssertCase_1(avlTree);


            
            
            
            
            
            
            avlTree.Insert(2); 
            avlTree.Insert(1); 

            
            AssertCase_2(avlTree);


            
            
            
            
            
            
            
            
            
            
            avlTree.Insert(3); 

            
            AssertCase_3(avlTree);


            
            
            
            
            
            
            
            
            
            
            avlTree.Insert(6); 

            
            AssertCase_4(avlTree);


            
            
            
            
            
            avlTree.Remove(avlTree.Root.Value); 

            
            AssertCase_5(avlTree);


            
            
            

            avlTree = new AVLTree<int>();
            var bsTree = new BinarySearchTree<int>();

            List<int> treeDataList = new List<int>() { 15, 25, 5, 12, 1, 16, 20, 9, 9, 7, 7, -1, 11, 19, 30, 8, 10, 13, 28, 39 };
            avlTree.Insert(treeDataList);
            bsTree.Insert(treeDataList);

            int avlTreeHeight = avlTree.Height;
            int bsTreeHeight = bsTree.Height;

            Assert.True(avlTreeHeight < bsTreeHeight, "Wrong heights. AVL Tree must be shorted than BS Tree.");

            treeDataList = new List<int>() { 15, 25, 5, 12, 1, 9, 7, -1, 11, 30, 8, 10, 13, 28, 39 };
            avlTree.Clear();
            avlTree.Insert(treeDataList);

            
            
            

        }


        
        
        private static void AssertCase_1(AVLTree<int> avlTree)
        {
            var avlRoot = avlTree.Root;
            Assert.True(avlRoot.Value == 5, "Wrong root.");
            Assert.True(avlRoot.LeftChild.Value == 4, "Wrong left child.");
            Assert.True(avlRoot.RightChild.Value == 7, "Wrong right child.");

            Assert.True(
                avlRoot.LeftChild.Height == 0
                && avlRoot.RightChild.Height == 0
                ,
                "Wrong heights at the leaf nodes!.");
        }

        
        private static void AssertCase_2(AVLTree<int> avlTree)
        {
            var avlRoot = avlTree.Root;
            Assert.True(avlRoot.Value == 5, "Wrong root.");
            Assert.True(avlRoot.Height == 2, "Wrong root height!");
            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
            Assert.True(avlRoot.RightChild.Value == 7, "Wrong right child from root.");
            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
            Assert.True(avlRoot.LeftChild.RightChild.Value == 4, "Wrong value at {root->left->right}.");

            Assert.True(
                avlRoot.LeftChild.LeftChild.Height == 0
                && avlRoot.LeftChild.RightChild.Height == 0
                && avlRoot.RightChild.Height == 0
                ,
                "Wrong heights at the leaf nodes!.");
        }

        
        private static void AssertCase_3(AVLTree<int> avlTree)
        {
            var avlRoot = avlTree.Root;
            Assert.True(avlRoot.Height == 2, "Wrong root height!");
            Assert.True(avlRoot.Value == 4, "Wrong root.");
            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
            Assert.True(avlRoot.RightChild.Value == 5, "Wrong right child from root.");
            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");

            Assert.True(
                avlRoot.LeftChild.LeftChild.Height == 0
                && avlRoot.LeftChild.RightChild.Height == 0
                && avlRoot.RightChild.RightChild.Height == 0
                ,
                "Wrong heights at the leaf nodes!.");
        }

        
        private static void AssertCase_4(AVLTree<int> avlTree)
        {
            var avlRoot = avlTree.Root;
            Assert.True(avlRoot.Height == 2, "Wrong root height!");
            Assert.True(avlRoot.Value == 4, "Wrong root.");
            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
            Assert.True(avlRoot.RightChild.Value == 6, "Wrong right child from root.");
            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
            Assert.True(avlRoot.RightChild.LeftChild.Value == 5, "Wrong value at {root->right->left}.");
            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");

            Assert.True(
                avlRoot.LeftChild.LeftChild.Height == 0
                && avlRoot.LeftChild.RightChild.Height == 0
                && avlRoot.RightChild.LeftChild.Height == 0
                && avlRoot.RightChild.RightChild.Height == 0
                ,
                "Wrong heights at the leaf nodes!.");
        }

        
        private static void AssertCase_5(AVLTree<int> avlTree)
        {
            var avlRoot = avlTree.Root;
            Assert.True(avlRoot.Height == 2, "Wrong root height!");
            Assert.True(avlRoot.Value == 5, "Wrong root.");
            Assert.True(avlRoot.LeftChild.Value == 2, "Wrong left child from root.");
            Assert.True(avlRoot.RightChild.Value == 6, "Wrong right child from root.");
            Assert.True(avlRoot.LeftChild.LeftChild.Value == 1, "Wrong value at {root->left->left}.");
            Assert.True(avlRoot.LeftChild.RightChild.Value == 3, "Wrong value at {root->left->right}.");
            Assert.True(avlRoot.RightChild.LeftChild == null, "Wrong value at {root->right->left}.");
            Assert.True(avlRoot.RightChild.RightChild.Value == 7, "Wrong value at {root->right->right}.");

            Assert.True(
                avlRoot.LeftChild.LeftChild.Height == 0
                && avlRoot.LeftChild.RightChild.Height == 0
                && avlRoot.RightChild.RightChild.Height == 0
                ,
                "Wrong heights at the leaf nodes!.");

        }
    }

}